// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: data_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RtDataInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var supportTime: Bool {
    get {return _supportTime ?? false}
    set {_supportTime = newValue}
  }
  /// Returns true if `supportTime` has been explicitly set.
  var hasSupportTime: Bool {return self._supportTime != nil}
  /// Clears the value of `supportTime`. Subsequent reads from it will return its default value.
  mutating func clearSupportTime() {self._supportTime = nil}

  var supportBattery: Bool {
    get {return _supportBattery ?? false}
    set {_supportBattery = newValue}
  }
  /// Returns true if `supportBattery` has been explicitly set.
  var hasSupportBattery: Bool {return self._supportBattery != nil}
  /// Clears the value of `supportBattery`. Subsequent reads from it will return its default value.
  mutating func clearSupportBattery() {self._supportBattery = nil}

  var supportHealth: Bool {
    get {return _supportHealth ?? false}
    set {_supportHealth = newValue}
  }
  /// Returns true if `supportHealth` has been explicitly set.
  var hasSupportHealth: Bool {return self._supportHealth != nil}
  /// Clears the value of `supportHealth`. Subsequent reads from it will return its default value.
  mutating func clearSupportHealth() {self._supportHealth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _supportTime: Bool? = nil
  fileprivate var _supportBattery: Bool? = nil
  fileprivate var _supportHealth: Bool? = nil
}

struct HisDataInfo: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var supportHealth: Bool {
    get {return _storage._supportHealth ?? false}
    set {_uniqueStorage()._supportHealth = newValue}
  }
  /// Returns true if `supportHealth` has been explicitly set.
  var hasSupportHealth: Bool {return _storage._supportHealth != nil}
  /// Clears the value of `supportHealth`. Subsequent reads from it will return its default value.
  mutating func clearSupportHealth() {_uniqueStorage()._supportHealth = nil}

  var supportGnss: Bool {
    get {return _storage._supportGnss ?? false}
    set {_uniqueStorage()._supportGnss = newValue}
  }
  /// Returns true if `supportGnss` has been explicitly set.
  var hasSupportGnss: Bool {return _storage._supportGnss != nil}
  /// Clears the value of `supportGnss`. Subsequent reads from it will return its default value.
  mutating func clearSupportGnss() {_uniqueStorage()._supportGnss = nil}

  var supportEcg: Bool {
    get {return _storage._supportEcg ?? false}
    set {_uniqueStorage()._supportEcg = newValue}
  }
  /// Returns true if `supportEcg` has been explicitly set.
  var hasSupportEcg: Bool {return _storage._supportEcg != nil}
  /// Clears the value of `supportEcg`. Subsequent reads from it will return its default value.
  mutating func clearSupportEcg() {_uniqueStorage()._supportEcg = nil}

  var supportPpg: Bool {
    get {return _storage._supportPpg ?? false}
    set {_uniqueStorage()._supportPpg = newValue}
  }
  /// Returns true if `supportPpg` has been explicitly set.
  var hasSupportPpg: Bool {return _storage._supportPpg != nil}
  /// Clears the value of `supportPpg`. Subsequent reads from it will return its default value.
  mutating func clearSupportPpg() {_uniqueStorage()._supportPpg = nil}

  var supportRri: Bool {
    get {return _storage._supportRri ?? false}
    set {_uniqueStorage()._supportRri = newValue}
  }
  /// Returns true if `supportRri` has been explicitly set.
  var hasSupportRri: Bool {return _storage._supportRri != nil}
  /// Clears the value of `supportRri`. Subsequent reads from it will return its default value.
  mutating func clearSupportRri() {_uniqueStorage()._supportRri = nil}

  var supportMedic: Bool {
    get {return _storage._supportMedic ?? false}
    set {_uniqueStorage()._supportMedic = newValue}
  }
  /// Returns true if `supportMedic` has been explicitly set.
  var hasSupportMedic: Bool {return _storage._supportMedic != nil}
  /// Clears the value of `supportMedic`. Subsequent reads from it will return its default value.
  mutating func clearSupportMedic() {_uniqueStorage()._supportMedic = nil}

  var supportSpo2: Bool {
    get {return _storage._supportSpo2 ?? false}
    set {_uniqueStorage()._supportSpo2 = newValue}
  }
  /// Returns true if `supportSpo2` has been explicitly set.
  var hasSupportSpo2: Bool {return _storage._supportSpo2 != nil}
  /// Clears the value of `supportSpo2`. Subsequent reads from it will return its default value.
  mutating func clearSupportSpo2() {_uniqueStorage()._supportSpo2 = nil}

  var supportSwim: Bool {
    get {return _storage._supportSwim ?? false}
    set {_uniqueStorage()._supportSwim = newValue}
  }
  /// Returns true if `supportSwim` has been explicitly set.
  var hasSupportSwim: Bool {return _storage._supportSwim != nil}
  /// Clears the value of `supportSwim`. Subsequent reads from it will return its default value.
  mutating func clearSupportSwim() {_uniqueStorage()._supportSwim = nil}

  var supportTemp: Bool {
    get {return _storage._supportTemp ?? false}
    set {_uniqueStorage()._supportTemp = newValue}
  }
  /// Returns true if `supportTemp` has been explicitly set.
  var hasSupportTemp: Bool {return _storage._supportTemp != nil}
  /// Clears the value of `supportTemp`. Subsequent reads from it will return its default value.
  mutating func clearSupportTemp() {_uniqueStorage()._supportTemp = nil}

  var supportHealthencrypt: Bool {
    get {return _storage._supportHealthencrypt ?? false}
    set {_uniqueStorage()._supportHealthencrypt = newValue}
  }
  /// Returns true if `supportHealthencrypt` has been explicitly set.
  var hasSupportHealthencrypt: Bool {return _storage._supportHealthencrypt != nil}
  /// Clears the value of `supportHealthencrypt`. Subsequent reads from it will return its default value.
  mutating func clearSupportHealthencrypt() {_uniqueStorage()._supportHealthencrypt = nil}

  var supportEcgencrypt: Bool {
    get {return _storage._supportEcgencrypt ?? false}
    set {_uniqueStorage()._supportEcgencrypt = newValue}
  }
  /// Returns true if `supportEcgencrypt` has been explicitly set.
  var hasSupportEcgencrypt: Bool {return _storage._supportEcgencrypt != nil}
  /// Clears the value of `supportEcgencrypt`. Subsequent reads from it will return its default value.
  mutating func clearSupportEcgencrypt() {_uniqueStorage()._supportEcgencrypt = nil}

  var supportPpgencrypt: Bool {
    get {return _storage._supportPpgencrypt ?? false}
    set {_uniqueStorage()._supportPpgencrypt = newValue}
  }
  /// Returns true if `supportPpgencrypt` has been explicitly set.
  var hasSupportPpgencrypt: Bool {return _storage._supportPpgencrypt != nil}
  /// Clears the value of `supportPpgencrypt`. Subsequent reads from it will return its default value.
  mutating func clearSupportPpgencrypt() {_uniqueStorage()._supportPpgencrypt = nil}

  var supportRriencrypt: Bool {
    get {return _storage._supportRriencrypt ?? false}
    set {_uniqueStorage()._supportRriencrypt = newValue}
  }
  /// Returns true if `supportRriencrypt` has been explicitly set.
  var hasSupportRriencrypt: Bool {return _storage._supportRriencrypt != nil}
  /// Clears the value of `supportRriencrypt`. Subsequent reads from it will return its default value.
  mutating func clearSupportRriencrypt() {_uniqueStorage()._supportRriencrypt = nil}

  var supportThirdPartyData: Bool {
    get {return _storage._supportThirdPartyData ?? false}
    set {_uniqueStorage()._supportThirdPartyData = newValue}
  }
  /// Returns true if `supportThirdPartyData` has been explicitly set.
  var hasSupportThirdPartyData: Bool {return _storage._supportThirdPartyData != nil}
  /// Clears the value of `supportThirdPartyData`. Subsequent reads from it will return its default value.
  mutating func clearSupportThirdPartyData() {_uniqueStorage()._supportThirdPartyData = nil}

  var supportThirdPartyDataV2: Bool {
    get {return _storage._supportThirdPartyDataV2 ?? false}
    set {_uniqueStorage()._supportThirdPartyDataV2 = newValue}
  }
  /// Returns true if `supportThirdPartyDataV2` has been explicitly set.
  var hasSupportThirdPartyDataV2: Bool {return _storage._supportThirdPartyDataV2 != nil}
  /// Clears the value of `supportThirdPartyDataV2`. Subsequent reads from it will return its default value.
  mutating func clearSupportThirdPartyDataV2() {_uniqueStorage()._supportThirdPartyDataV2 = nil}

  var supportGyroscopeDatat: Bool {
    get {return _storage._supportGyroscopeDatat ?? false}
    set {_uniqueStorage()._supportGyroscopeDatat = newValue}
  }
  /// Returns true if `supportGyroscopeDatat` has been explicitly set.
  var hasSupportGyroscopeDatat: Bool {return _storage._supportGyroscopeDatat != nil}
  /// Clears the value of `supportGyroscopeDatat`. Subsequent reads from it will return its default value.
  mutating func clearSupportGyroscopeDatat() {_uniqueStorage()._supportGyroscopeDatat = nil}

  var supportYylpfe: Bool {
    get {return _storage._supportYylpfe ?? false}
    set {_uniqueStorage()._supportYylpfe = newValue}
  }
  /// Returns true if `supportYylpfe` has been explicitly set.
  var hasSupportYylpfe: Bool {return _storage._supportYylpfe != nil}
  /// Clears the value of `supportYylpfe`. Subsequent reads from it will return its default value.
  mutating func clearSupportYylpfe() {_uniqueStorage()._supportYylpfe = nil}

  var supportMultiLeadsEcg: Bool {
    get {return _storage._supportMultiLeadsEcg ?? false}
    set {_uniqueStorage()._supportMultiLeadsEcg = newValue}
  }
  /// Returns true if `supportMultiLeadsEcg` has been explicitly set.
  var hasSupportMultiLeadsEcg: Bool {return _storage._supportMultiLeadsEcg != nil}
  /// Clears the value of `supportMultiLeadsEcg`. Subsequent reads from it will return its default value.
  mutating func clearSupportMultiLeadsEcg() {_uniqueStorage()._supportMultiLeadsEcg = nil}

  var supportBpOriginalData: Bool {
    get {return _storage._supportBpOriginalData ?? false}
    set {_uniqueStorage()._supportBpOriginalData = newValue}
  }
  /// Returns true if `supportBpOriginalData` has been explicitly set.
  var hasSupportBpOriginalData: Bool {return _storage._supportBpOriginalData != nil}
  /// Clears the value of `supportBpOriginalData`. Subsequent reads from it will return its default value.
  mutating func clearSupportBpOriginalData() {_uniqueStorage()._supportBpOriginalData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DataInfoResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rtDataInfo: RtDataInfo {
    get {return _rtDataInfo ?? RtDataInfo()}
    set {_rtDataInfo = newValue}
  }
  /// Returns true if `rtDataInfo` has been explicitly set.
  var hasRtDataInfo: Bool {return self._rtDataInfo != nil}
  /// Clears the value of `rtDataInfo`. Subsequent reads from it will return its default value.
  mutating func clearRtDataInfo() {self._rtDataInfo = nil}

  var hisDataInfo: HisDataInfo {
    get {return _hisDataInfo ?? HisDataInfo()}
    set {_hisDataInfo = newValue}
  }
  /// Returns true if `hisDataInfo` has been explicitly set.
  var hasHisDataInfo: Bool {return self._hisDataInfo != nil}
  /// Clears the value of `hisDataInfo`. Subsequent reads from it will return its default value.
  mutating func clearHisDataInfo() {self._hisDataInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rtDataInfo: RtDataInfo? = nil
  fileprivate var _hisDataInfo: HisDataInfo? = nil
}

struct DataInfoRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reserved: UInt32 {
    get {return _reserved ?? 0}
    set {_reserved = newValue}
  }
  /// Returns true if `reserved` has been explicitly set.
  var hasReserved: Bool {return self._reserved != nil}
  /// Clears the value of `reserved`. Subsequent reads from it will return its default value.
  mutating func clearReserved() {self._reserved = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reserved: UInt32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RtDataInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RtDataInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "support_time"),
    2: .standard(proto: "support_battery"),
    3: .standard(proto: "support_health"),
  ]

  public var isInitialized: Bool {
    if self._supportTime == nil {return false}
    if self._supportBattery == nil {return false}
    if self._supportHealth == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._supportTime) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._supportBattery) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._supportHealth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._supportTime {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._supportBattery {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._supportHealth {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RtDataInfo, rhs: RtDataInfo) -> Bool {
    if lhs._supportTime != rhs._supportTime {return false}
    if lhs._supportBattery != rhs._supportBattery {return false}
    if lhs._supportHealth != rhs._supportHealth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisDataInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisDataInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "support_health"),
    2: .standard(proto: "support_gnss"),
    3: .standard(proto: "support_ecg"),
    4: .standard(proto: "support_ppg"),
    5: .standard(proto: "support_rri"),
    6: .standard(proto: "support_medic"),
    7: .standard(proto: "support_spo2"),
    8: .standard(proto: "support_swim"),
    9: .standard(proto: "support_temp"),
    10: .standard(proto: "support_healthencrypt"),
    11: .standard(proto: "support_ecgencrypt"),
    12: .standard(proto: "support_ppgencrypt"),
    13: .standard(proto: "support_rriencrypt"),
    14: .standard(proto: "support_ThirdParty_data"),
    15: .standard(proto: "support_ThirdParty_data_V2"),
    16: .standard(proto: "support_Gyroscope_datat"),
    17: .standard(proto: "support_YYLPFE"),
    18: .standard(proto: "support_multi_leads_ecg"),
    19: .standard(proto: "support_bp_Original_data"),
  ]

  fileprivate class _StorageClass {
    var _supportHealth: Bool? = nil
    var _supportGnss: Bool? = nil
    var _supportEcg: Bool? = nil
    var _supportPpg: Bool? = nil
    var _supportRri: Bool? = nil
    var _supportMedic: Bool? = nil
    var _supportSpo2: Bool? = nil
    var _supportSwim: Bool? = nil
    var _supportTemp: Bool? = nil
    var _supportHealthencrypt: Bool? = nil
    var _supportEcgencrypt: Bool? = nil
    var _supportPpgencrypt: Bool? = nil
    var _supportRriencrypt: Bool? = nil
    var _supportThirdPartyData: Bool? = nil
    var _supportThirdPartyDataV2: Bool? = nil
    var _supportGyroscopeDatat: Bool? = nil
    var _supportYylpfe: Bool? = nil
    var _supportMultiLeadsEcg: Bool? = nil
    var _supportBpOriginalData: Bool? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _supportHealth = source._supportHealth
      _supportGnss = source._supportGnss
      _supportEcg = source._supportEcg
      _supportPpg = source._supportPpg
      _supportRri = source._supportRri
      _supportMedic = source._supportMedic
      _supportSpo2 = source._supportSpo2
      _supportSwim = source._supportSwim
      _supportTemp = source._supportTemp
      _supportHealthencrypt = source._supportHealthencrypt
      _supportEcgencrypt = source._supportEcgencrypt
      _supportPpgencrypt = source._supportPpgencrypt
      _supportRriencrypt = source._supportRriencrypt
      _supportThirdPartyData = source._supportThirdPartyData
      _supportThirdPartyDataV2 = source._supportThirdPartyDataV2
      _supportGyroscopeDatat = source._supportGyroscopeDatat
      _supportYylpfe = source._supportYylpfe
      _supportMultiLeadsEcg = source._supportMultiLeadsEcg
      _supportBpOriginalData = source._supportBpOriginalData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._supportHealth == nil {return false}
      if _storage._supportGnss == nil {return false}
      if _storage._supportEcg == nil {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._supportHealth) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._supportGnss) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._supportEcg) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._supportPpg) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._supportRri) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._supportMedic) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._supportSpo2) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._supportSwim) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._supportTemp) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._supportHealthencrypt) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._supportEcgencrypt) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._supportPpgencrypt) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._supportRriencrypt) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._supportThirdPartyData) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._supportThirdPartyDataV2) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._supportGyroscopeDatat) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._supportYylpfe) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._supportMultiLeadsEcg) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._supportBpOriginalData) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._supportHealth {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._supportGnss {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._supportEcg {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._supportPpg {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._supportRri {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._supportMedic {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._supportSpo2 {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._supportSwim {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._supportTemp {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._supportHealthencrypt {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._supportEcgencrypt {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._supportPpgencrypt {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._supportRriencrypt {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._supportThirdPartyData {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._supportThirdPartyDataV2 {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._supportGyroscopeDatat {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._supportYylpfe {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._supportMultiLeadsEcg {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._supportBpOriginalData {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisDataInfo, rhs: HisDataInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._supportHealth != rhs_storage._supportHealth {return false}
        if _storage._supportGnss != rhs_storage._supportGnss {return false}
        if _storage._supportEcg != rhs_storage._supportEcg {return false}
        if _storage._supportPpg != rhs_storage._supportPpg {return false}
        if _storage._supportRri != rhs_storage._supportRri {return false}
        if _storage._supportMedic != rhs_storage._supportMedic {return false}
        if _storage._supportSpo2 != rhs_storage._supportSpo2 {return false}
        if _storage._supportSwim != rhs_storage._supportSwim {return false}
        if _storage._supportTemp != rhs_storage._supportTemp {return false}
        if _storage._supportHealthencrypt != rhs_storage._supportHealthencrypt {return false}
        if _storage._supportEcgencrypt != rhs_storage._supportEcgencrypt {return false}
        if _storage._supportPpgencrypt != rhs_storage._supportPpgencrypt {return false}
        if _storage._supportRriencrypt != rhs_storage._supportRriencrypt {return false}
        if _storage._supportThirdPartyData != rhs_storage._supportThirdPartyData {return false}
        if _storage._supportThirdPartyDataV2 != rhs_storage._supportThirdPartyDataV2 {return false}
        if _storage._supportGyroscopeDatat != rhs_storage._supportGyroscopeDatat {return false}
        if _storage._supportYylpfe != rhs_storage._supportYylpfe {return false}
        if _storage._supportMultiLeadsEcg != rhs_storage._supportMultiLeadsEcg {return false}
        if _storage._supportBpOriginalData != rhs_storage._supportBpOriginalData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DataInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rt_data_info"),
    2: .standard(proto: "his_data_info"),
  ]

  public var isInitialized: Bool {
    if let v = self._rtDataInfo, !v.isInitialized {return false}
    if let v = self._hisDataInfo, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rtDataInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._hisDataInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rtDataInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._hisDataInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DataInfoResponse, rhs: DataInfoResponse) -> Bool {
    if lhs._rtDataInfo != rhs._rtDataInfo {return false}
    if lhs._hisDataInfo != rhs._hisDataInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DataInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reserved"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._reserved) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._reserved {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DataInfoRequest, rhs: DataInfoRequest) -> Bool {
    if lhs._reserved != rhs._reserved {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
