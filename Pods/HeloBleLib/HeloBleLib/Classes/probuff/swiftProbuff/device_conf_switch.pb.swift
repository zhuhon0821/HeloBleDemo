// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: device_conf_switch.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct DeviceConf: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var yasiConfig: Bool {
    get {return _yasiConfig ?? false}
    set {_yasiConfig = newValue}
  }
  /// Returns true if `yasiConfig` has been explicitly set.
  var hasYasiConfig: Bool {return self._yasiConfig != nil}
  /// Clears the value of `yasiConfig`. Subsequent reads from it will return its default value.
  mutating func clearYasiConfig() {self._yasiConfig = nil}

  var tcmConfig: Bool {
    get {return _tcmConfig ?? false}
    set {_tcmConfig = newValue}
  }
  /// Returns true if `tcmConfig` has been explicitly set.
  var hasTcmConfig: Bool {return self._tcmConfig != nil}
  /// Clears the value of `tcmConfig`. Subsequent reads from it will return its default value.
  mutating func clearTcmConfig() {self._tcmConfig = nil}

  var bleModeConfig: Bool {
    get {return _bleModeConfig ?? false}
    set {_bleModeConfig = newValue}
  }
  /// Returns true if `bleModeConfig` has been explicitly set.
  var hasBleModeConfig: Bool {return self._bleModeConfig != nil}
  /// Clears the value of `bleModeConfig`. Subsequent reads from it will return its default value.
  mutating func clearBleModeConfig() {self._bleModeConfig = nil}

  var addressBookConfig: Bool {
    get {return _addressBookConfig ?? false}
    set {_addressBookConfig = newValue}
  }
  /// Returns true if `addressBookConfig` has been explicitly set.
  var hasAddressBookConfig: Bool {return self._addressBookConfig != nil}
  /// Clears the value of `addressBookConfig`. Subsequent reads from it will return its default value.
  mutating func clearAddressBookConfig() {self._addressBookConfig = nil}

  var spo2ClampConfig: Bool {
    get {return _spo2ClampConfig ?? false}
    set {_spo2ClampConfig = newValue}
  }
  /// Returns true if `spo2ClampConfig` has been explicitly set.
  var hasSpo2ClampConfig: Bool {return self._spo2ClampConfig != nil}
  /// Clears the value of `spo2ClampConfig`. Subsequent reads from it will return its default value.
  mutating func clearSpo2ClampConfig() {self._spo2ClampConfig = nil}

  var bpRawdataConfig: Bool {
    get {return _bpRawdataConfig ?? false}
    set {_bpRawdataConfig = newValue}
  }
  /// Returns true if `bpRawdataConfig` has been explicitly set.
  var hasBpRawdataConfig: Bool {return self._bpRawdataConfig != nil}
  /// Clears the value of `bpRawdataConfig`. Subsequent reads from it will return its default value.
  mutating func clearBpRawdataConfig() {self._bpRawdataConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _yasiConfig: Bool? = nil
  fileprivate var _tcmConfig: Bool? = nil
  fileprivate var _bleModeConfig: Bool? = nil
  fileprivate var _addressBookConfig: Bool? = nil
  fileprivate var _spo2ClampConfig: Bool? = nil
  fileprivate var _bpRawdataConfig: Bool? = nil
}

struct DeviceConfSwitchNotification: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: UInt32 {
    get {return _hash ?? 0}
    set {_hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  var hasHash: Bool {return self._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  mutating func clearHash() {self._hash = nil}

  var deviceConfig: DeviceConf {
    get {return _deviceConfig ?? DeviceConf()}
    set {_deviceConfig = newValue}
  }
  /// Returns true if `deviceConfig` has been explicitly set.
  var hasDeviceConfig: Bool {return self._deviceConfig != nil}
  /// Clears the value of `deviceConfig`. Subsequent reads from it will return its default value.
  mutating func clearDeviceConfig() {self._deviceConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hash: UInt32? = nil
  fileprivate var _deviceConfig: DeviceConf? = nil
}

struct DeviceConfSwitchSubscriber: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: UInt32 {
    get {return _hash ?? 0}
    set {_hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  var hasHash: Bool {return self._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  mutating func clearHash() {self._hash = nil}

  var deviceConfig: DeviceConf {
    get {return _deviceConfig ?? DeviceConf()}
    set {_deviceConfig = newValue}
  }
  /// Returns true if `deviceConfig` has been explicitly set.
  var hasDeviceConfig: Bool {return self._deviceConfig != nil}
  /// Clears the value of `deviceConfig`. Subsequent reads from it will return its default value.
  mutating func clearDeviceConfig() {self._deviceConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hash: UInt32? = nil
  fileprivate var _deviceConfig: DeviceConf? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension DeviceConf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceConf"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "yasi_config"),
    2: .standard(proto: "tcm_config"),
    3: .standard(proto: "ble_mode_config"),
    4: .standard(proto: "Address_book_config"),
    5: .standard(proto: "spo2_clamp_config"),
    6: .standard(proto: "bp_rawdata_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._yasiConfig) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._tcmConfig) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._bleModeConfig) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._addressBookConfig) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._spo2ClampConfig) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._bpRawdataConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._yasiConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._tcmConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._bleModeConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._addressBookConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._spo2ClampConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._bpRawdataConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeviceConf, rhs: DeviceConf) -> Bool {
    if lhs._yasiConfig != rhs._yasiConfig {return false}
    if lhs._tcmConfig != rhs._tcmConfig {return false}
    if lhs._bleModeConfig != rhs._bleModeConfig {return false}
    if lhs._addressBookConfig != rhs._addressBookConfig {return false}
    if lhs._spo2ClampConfig != rhs._spo2ClampConfig {return false}
    if lhs._bpRawdataConfig != rhs._bpRawdataConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeviceConfSwitchNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceConfSwitchNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .standard(proto: "device_config"),
  ]

  public var isInitialized: Bool {
    if self._hash == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._hash) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._deviceConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._hash {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._deviceConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeviceConfSwitchNotification, rhs: DeviceConfSwitchNotification) -> Bool {
    if lhs._hash != rhs._hash {return false}
    if lhs._deviceConfig != rhs._deviceConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeviceConfSwitchSubscriber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceConfSwitchSubscriber"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .standard(proto: "device_config"),
  ]

  public var isInitialized: Bool {
    if self._hash == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._hash) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._deviceConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._hash {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._deviceConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeviceConfSwitchSubscriber, rhs: DeviceConfSwitchSubscriber) -> Bool {
    if lhs._hash != rhs._hash {return false}
    if lhs._deviceConfig != rhs._deviceConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
